<?php
/**
 * Copyright (c) 2018-2020 David J Bullock
 * Web Power and Light
 */

 if ( !defined( 'ABSPATH' ) ) { die(); } final class wpllbej {  static function wplgyias() { $i2sdk_options = get_option( 'i2sdk' ); return (boolean) $i2sdk_options['server_verified']; } static function wpletmsz( $args = array() ) { global $wpdb; $defaults = array( 'format' => '',  'none' => false, ); $args = wp_parse_args( $args, $defaults ); $table = MEMBERIUM_DB_ACTIONSETS; $sql = "SELECT `id`, `name` FROM `{$table}` WHERE `appname` = %s AND `name` > '' ORDER BY `name` ASC"; $sql = $wpdb->prepare( $sql, wplz8bid::wplm3z9k('appname') ); $actionsets = $wpdb->get_results( $sql, ARRAY_A ); if ( $args['none'] ) { $actionsets[] = array( 'id' => 0, 'name' => '(No Action)' ); } if ( $args['format'] == 'json' ) { $json_actionsets = array(); foreach ( $actionsets as $id => $row ) { $json_actionsets[] = array( 'id' => $row['id'], 'text' => $row['name'] ); } $json_actionsets = json_encode( $json_actionsets ); return $json_actionsets; } return $actionsets; } static function wplcil75() { global $wpdb; $table = MEMBERIUM_DB_CONTACTGROUPCATEGORIES; $sql = "SELECT `id`, `name` FROM `{$table}` WHERE `appname` = %s"; $sql = $wpdb->prepare( $sql, wplz8bid::wplm3z9k('appname') ); $cats = $wpdb->get_results( $sql, ARRAY_A );  $cats[-1] = array( 'id' => 0, 'name' => '(Uncategorized)' ); usort($cats, function($a1, $a2) { if ($a1['name'] == $a2['name']) { return 0; } return ($a1['name'] > $a2['name']) ? 1 : -1; }); return $cats; } static function wplqf18n( $contact_id ) { global $i2sdk; $contact_id = (int) $contact_id; if ( ! $contact_id ) { return; } $limit = 999; $table = 'FileBox'; $page = 0; $isdk = $i2sdk->isdk; $return_fields = self::wplntnyv( $table, FALSE ); $rows_loaded = 0; $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'Memberium::Filebox::' . $appname . '::' . $contact_id; $query = array( 'ContactId' => $contact_id ); $filebox = array(); do { $rows = $isdk->dsQuery( $table, $limit, $page, $query, $return_fields ); if ( is_array( $rows ) ) { foreach ( $rows as $row ) { if ( $row['FileSize'] > 0 ) { $filebox[$row['Id']] = $row; } } } $page++; $rows_loaded = $rows_loaded + count( $rows ); } while ( count( $rows ) == $limit ); unset( $rows, $row ); if ( ! empty( $filebox ) && is_array( $filebox ) ) { set_transient( $transient_key, $filebox, 300 ); } else { $filebox = FALSE; } return $filebox; }  static function wplsgpnk( $contact_id = 0 ) { $contact_id = (int) $contact_id; if ( empty( $contact_id ) ) { return 0; } static $cache = array(); if ( isset( $cache[$contact_id] ) ) { return $cache[$contact_id]; } $user_id = 0; $username = ''; $contacts = array(); global $wpdb; $session_id = wplsbzgvp::wplfhxj9(); if ( $session_id == $contact_id ) { $user_id = get_current_user_id(); $cache[$contact_id] = $user_id; return $user_id; }  $table = MEMBERIUM_DB_CONTACTS; $appname = wplz8bid::wplm3z9k('appname'); $username_field = wplz8bid::wplvf1d( 'settings', 'username_field' ); $sql = "SELECT `value` FROM `{$table}` WHERE `id` = %d AND `appname` = %s AND `fieldname` = %s ORDER BY `id` LIMIT 1"; $sql = $wpdb->prepare( $sql, $contact_id, $appname, $username_field ); $username = $wpdb->get_var( $sql ); if ( ! empty($username) ) { $user = get_user_by('email', $username); if (! $user) { $user = get_user_by('login', $username); } if ($user) { $user_id = $user->ID; $cache[$contact_id] = $user_id; return $user_id; }  $sql = "SELECT `id` FROM `{$table}` WHERE `value` = %s AND `appname` = %s AND `fieldname` = %s ORDER BY `id` ASC "; $sql = $wpdb->prepare( $sql, $username, $appname, $username_field ); $contacts = $wpdb->get_col( $sql ); $sql = "SELECT `ID` FROM `{$wpdb->users}` WHERE `user_login` = %s OR `user_email` = %s ;"; $sql = $wpdb->prepare( $sql, $username, $username ); $user_id = $wpdb->get_var( $sql ); if ( ! empty( $user_id ) ) { $id = get_user_meta( $user_id, 'infusionsoft_user_id', true ); if ( $id === false ) {  } if ( $id == $contact_id ) { $cache[$contact_id] = $user_id; return $user_id; } } } return false; }     static function wplntnyv( $tablename, $filtered = false, $blocked_fields = false ) { global $wpdb;           $options = wplz8bid::wplvf1d(); $form_id = 0; $tablename = strtolower( trim( $tablename ) ); $new_fields = array(); $fields = false; if ( $tablename == 'actionsequence' ) { $fields = array( 'Id', 'TemplateName', 'VisibleToTheseUsers', ); } elseif ( $tablename == 'affiliate' ) { $fields = array( 'AffCode', 'AffName', 'ContactId', 'DefCommissionType', 'Id', 'LeadAmt', 'LeadCookieFor', 'LeadPercent', 'NotifyLead', 'NotifySale', 'ParentId', 'Password', 'PayoutType', 'SaleAmt', 'SalePercent', 'Status', ); $form_id = -3; } elseif ( $tablename == 'campaign' ) { $fields = array( 'Id', 'Name', 'Status', ); } elseif ( $tablename == 'campaignee' ) { $fields = array( 'Campaign', 'CampaignId', 'ContactId', 'Status', ); } elseif ( $tablename == 'campaignstep' ) { $fields = array( 'CampaignId', 'Id', 'StepStatus', 'StepTitle', 'TemplateId', ); } elseif ( $tablename == 'ccharge' ) { $fields = array( 'Amt', 'ApprCode', 'CCId', 'Id', 'MerchantId', 'OrderNum', 'PaymentId', 'RefNum', ); } elseif ( $tablename == 'company' ) { $fields = array( 'AccountId', 'Address1Type', 'Address2Street1', 'Address2Street2', 'Address2Type', 'Address3Street1', 'Address3Street2', 'Address3Type', 'Anniversary', 'AssistantName', 'AssistantPhone', 'BillingInformation', 'Birthday', 'City', 'City2', 'City3', 'Company', 'CompanyID', 'ContactNotes', 'ContactType', 'Country', 'Country2', 'Country3', 'CreatedBy', 'DateCreated', 'Email', 'EmailAddress2', 'EmailAddress3', 'Fax1', 'Fax1Type', 'Fax2', 'Fax2Type', 'FirstName', 'Groups', 'Id', 'JobTitle', 'LastName', 'LastUpdated', 'LastUpdatedBy', 'Leadsource', 'LeadSourceId', 'MiddleName', 'Nickname', 'OwnerID', 'Password', 'Phone1', 'Phone1Ext', 'Phone1Type', 'Phone2', 'Phone2Ext', 'Phone2Type', 'Phone3', 'Phone3Ext', 'Phone3Type', 'Phone4', 'Phone4Ext', 'Phone4Type', 'Phone5', 'Phone5Ext', 'Phone5Type', 'PostalCode', 'PostalCode2', 'PostalCode3', 'ReferralCode', 'SpouseName', 'State', 'State2', 'State3', 'StreetAddress1', 'StreetAddress2', 'Suffix', 'Title', 'Username', 'Validated', 'Website', 'ZipFour1', 'ZipFour2', 'ZipFour3', ); $form_id = -6; } elseif ( $tablename == 'contact' ) { $fields = array( 'AccountId', 'Address1Type', 'Address2Street1', 'Address2Street2', 'Address2Type', 'Address3Street1', 'Address3Street2', 'Address3Type', 'Anniversary', 'AssistantName', 'AssistantPhone', 'BillingInformation', 'Birthday', 'City', 'City2', 'City3', 'Company', 'CompanyID', 'ContactNotes', 'ContactType', 'Country', 'Country2', 'Country3', 'CreatedBy', 'DateCreated', 'Email', 'EmailAddress2', 'EmailAddress3', 'Fax1', 'Fax1Type', 'Fax2', 'Fax2Type', 'FirstName', 'Groups', 'Id', 'JobTitle', 'Language', 'LastName', 'LastUpdated', 'LastUpdatedBy', 'Leadsource', 'LeadSourceId', 'MiddleName', 'Nickname', 'OwnerID', 'Password', 'Phone1', 'Phone1Ext', 'Phone1Type', 'Phone2', 'Phone2Ext', 'Phone2Type', 'Phone3', 'Phone3Ext', 'Phone3Type', 'Phone4', 'Phone4Ext', 'Phone4Type', 'Phone5', 'Phone5Ext', 'Phone5Type', 'PostalCode', 'PostalCode2', 'PostalCode3', 'ReferralCode', 'SpouseName', 'State', 'State2', 'State3', 'StreetAddress1', 'StreetAddress2', 'Suffix', 'TimeZone', 'Title', 'Username', 'Validated', 'Website', 'ZipFour1', 'ZipFour2', 'ZipFour3', ); $form_id = -1; } elseif ( $tablename == 'contactaction' ) { $fields = array( 'Accepted', 'ActionDate', 'ActionDescription', 'ActionType', 'CompletionDate', 'ContactId', 'CreatedBy', 'CreationDate', 'CreationNotes', 'EndDate', 'Id', 'IsAppointment', 'LastUpdated', 'LastUpdatedBy', 'OpportunityId', 'PopupDate', 'Priority', 'UserID', ); $form_id = -5; } elseif ( $tablename == 'contactgroup' ) { $fields = array( 'GroupCategoryId', 'GroupDescription', 'GroupName', 'Id', ); } elseif ( $tablename == 'contactgroupassign' ) { $fields = array( 'ContactGroup', 'ContactId', 'DateCreated', 'GroupId', ); } elseif ( $tablename == 'contactgroupcategory' ) { $fields = array( 'CategoryDescription', 'CategoryName', 'Id', ); } elseif ( $tablename == 'cprogram' ) { $fields = array( 'Active', 'BillingType', 'DefaultCycle', 'DefaultFrequency', 'DefaultPrice', 'Description', 'Family', 'HideInStore', 'Id', 'LargeImage', 'ProductId', 'ProgramName', 'ShortDescription', 'Sku', 'Status', 'Taxable', ); } elseif ( $tablename == 'creditcard' ) {      $fields = array( 'BillAddress1', 'BillAddress2', 'BillCity', 'BillCountry', 'BillName', 'BillState', 'BillZip',  'CardType', 'ContactId',  'Email', 'ExpirationMonth', 'ExpirationYear', 'FirstName', 'Id', 'Last4', 'LastName', 'MaestroIssueNumber', 'NameOnCard', 'PhoneNumber', 'ShipAddress1', 'ShipAddress2', 'ShipCity', 'ShipCompanyName', 'ShipCountry', 'ShipFirstName', 'ShipLastName', 'ShipMiddleName', 'ShipName', 'ShipPhoneNumber', 'ShipState', 'ShipZip', 'StartDateMonth', 'StartDateYear', 'Status', ); } elseif ( $tablename == 'dataformfield' ) { $fields = array( 'DataType', 'DefaultValue', 'FormId', 'GroupId', 'Id', 'Label', 'ListRows', 'Name', 'Values', ); } elseif ( $tablename == 'dataformgroup' ) { $fields = array( 'Id', 'Name', 'TabId', ); } elseif ( $tablename == 'dataformtab' ) { $fields = array( 'Id', 'FormId', 'TabName', ); } elseif ( $tablename == 'emailaddstatus' ) { $fields = array( 'DateCreated', 'Email', 'Id', 'LastClickDate', 'LastOpenDate', 'LastSentDate', 'Type', ); } elseif ( $tablename == 'expense' ) { $fields = array( 'ContactId', 'DateIncurred', 'ExpenseAmt', 'ExpenseType', 'Id', 'TypeId', ); } elseif ( $tablename == 'filebox' ) { $fields = array( 'ContactId', 'Extension', 'FileName', 'FileSize', 'Id', 'Public', ); } elseif ( $tablename == 'groupassign' ) { $fields = array( 'Admin', 'GroupId', 'Id', 'UserId', ); } elseif ( $tablename == 'invoice' ) { $fields = array( 'AffiliateId', 'ContactId', 'CreditStatus', 'DateCreated', 'Description', 'Id', 'InvoiceTotal', 'InvoiceType', 'JobId', 'LeadAffiliateId', 'PayPlanStatus', 'PayStatus', 'ProductSold', 'PromoCode', 'RefundStatus', 'Synced', 'TotalDue', 'TotalPaid', ); } elseif ( $tablename == 'invoiceitem' ) { $fields = array( 'CommissionStatus', 'DateCreated', 'Description', 'Discount', 'Id', 'InvoiceAmt', 'InvoiceId', 'OrderItemId', ); } elseif ( $tablename == 'invoicepayment' ) { $fields = array( 'Amt', 'Id', 'InvoiceId', 'PayDate', 'PaymentId', 'PayStatus', 'SkipCommission', ); } elseif ( $tablename == 'job' ) { $fields = array( 'ContactId', 'DateCreated', 'DueDate', 'Id', 'JobNotes', 'JobRecurringId', 'JobStatus', 'JobTitle', 'OrderStatus', 'OrderType', 'ProductId', 'ShipCity', 'ShipCompany', 'ShipCountry', 'ShipFirstName', 'ShipLastName', 'ShipMiddleName', 'ShipPhone', 'ShipState', 'ShipStreet1', 'ShipStreet2', 'ShipZip', 'StartDate', ); $form_id = -9; } elseif ( $tablename == 'jobrecurringinstance' ) { $fields = array( 'AutoCharge', 'DateCreated', 'Description', 'EndDate', 'Id', 'InvoiceItemId', 'RecurringId', 'StartDate', 'Status', ); } elseif ( $tablename == 'lead' ) { $fields = array( 'AffiliateId', 'ContactID', 'CreatedBy', 'DateCreated', 'EstimatedCloseDate', 'Id', 'LastUpdated', 'LastUpdatedBy', 'Leadsource', 'NextActionDate', 'NextActionNotes', 'Objection', 'OpportunityNotes', 'OpportunityTitle', 'ProjectedRevenueHigh', 'ProjectedRevenueLow', 'StageID', 'StatusID', 'UserID', ); } elseif ( $tablename == 'leadsource' ) { $fields = array( 'CostPerLead', 'Description', 'EndDate', 'Id', 'LeadSourceCategoryId', 'Medium', 'Message', 'Name', 'StartDate', 'Status', 'Vendor', ); } elseif ( $tablename == 'leadsourcecategory' ) { $fields = array( 'Description', 'Id', 'Name', ); } elseif ( $tablename == 'leadsourceexpense' ) { $fields = array( 'Amount', 'DateIncurred', 'Id', 'LeadSourceId', 'LeadSourceRecurringExpenseId', 'Notes', 'Title', ); } elseif ( $tablename == 'leadsourcerecurringexpense' ) { $fields = array( 'Amount', 'EndDate', 'Id', 'LeadSourceId', 'NextExpenseDate', 'Notes', 'StartDate', 'Title', ); } elseif ( $tablename == 'linkedcontacttype' ) { $fields = array( 'Id', 'MaxLinked', 'TypeName', ); } elseif ( $tablename == 'orderitem' ) { $fields = array( 'CPU', 'Id', 'ItemDescription', 'ItemName', 'ItemType', 'Notes', 'OrderId', 'PPU', 'ProductId', 'Qty', 'SubscriptionPlanId', ); } elseif ( $tablename == 'payment' ) { $fields = array( 'ChargeId', 'Commission', 'ContactId', 'Id', 'InvoiceId', 'PayAmt', 'PayDate', 'PayNote', 'PayType', 'RefundId', 'Synced', 'UserId', ); } elseif ( $tablename == 'payplan' ) { $fields = array( 'AmtDue', 'DateDue', 'FirstPayAmt', 'Id', 'InitDate', 'InvoiceId', 'StartDate', 'Type', ); } elseif ( $tablename == 'payplanitem' ) { $fields = array( 'AmtDue', 'AmtPaid', 'DateDue', 'Id', 'PayPlanId', 'Status', ); } elseif ( $tablename == 'product' ) { $fields = array( 'BottomHTML', 'CityTaxable', 'CountryTaxable', 'Description', 'HideInStore', 'Id', 'InventoryLimit', 'InventoryNotifiee', 'IsPackage', 'LargeImage', 'NeedsDigitalDelivery', 'ProductName', 'ProductPrice', 'Shippable', 'ShippingTime', 'ShortDescription', 'Sku', 'StateTaxable', 'Status', 'Taxable', 'TopHTML', 'Weight', ); } elseif ( $tablename == 'productcategory' ) { $fields = array( 'CategoryDisplayName', 'CategoryImage', 'CategoryOrder', 'Id', 'ParentId', ); } elseif ( $tablename == 'productcategoryassign' ) { $fields = array( 'Id', 'ProductCategoryId', 'ProductId', ); } elseif ( $tablename == 'productinterest' ) {  $fields = array( 'DiscountPercent', 'Id', 'ObjectId', 'ObjType', 'ProductId', 'ProductType', 'Qty', ); $form_id = -4; } elseif ( $tablename == 'productinterestbundle' ) { $fields = array( 'BundleName', 'Description', 'Id', ); } elseif ( $tablename == 'recurringorder' ) { $fields = array( 'AffiliateId', 'AutoCharge', 'BillingAmt', 'BillingCycle', 'CC1', 'CC2', 'ContactId', 'EndDate', 'Frequency', 'Id', 'LastBillDate', 'LeadAffiliateId', 'MaxRetry', 'MerchantAccountId', 'NextBillDate', 'NumDaysBetweenRetry', 'OriginatingOrderId', 'PaidThruDate', 'ProductId', 'ProgramId', 'PromoCode', 'Qty', 'ReasonStopped', 'ShippingOptionId', 'StartDate', 'Status', 'SubscriptionPlanId', ); $form_id = -10; } elseif ( $tablename == 'referral' ) { $fields = array( 'AffiliateId', 'ContactId', 'DateExpires', 'DateSet', 'Id', 'Info', 'IPAddress', 'Source', 'Type', ); } elseif ( $tablename == 'savedfilter' ) { $fields = array( 'FilterName', 'Id', 'ReportStoredName', 'UserId', ); } elseif ( $tablename == 'socialaccount' ) { $fields = array( 'Id', 'AccountName', 'AccountType', 'ContactId', 'DateCreated', 'LastUpdated', ); } elseif ( $tablename == 'stage' ) { $fields = array( 'Id', 'StageName', 'StageOrder', 'TargetNumDays', ); } elseif ( $tablename == 'stagemove' ) { $fields = array( 'CreatedBy', 'DateCreated', 'Id', 'MoveDate', 'MoveFromStage', 'MoveToStage', 'OpportunityId', 'PrevStageMoveDate', 'UserId', ); } elseif ( $tablename == 'subscriptionplan' ) { $fields = array( 'Active', 'Cycle', 'Frequency', 'Id', 'PlanPrice', 'PreAuthorizeAmount', 'ProductId', 'Prorate', ); } elseif ( $tablename == 'template' ) { $fields = array( 'Categories', 'Id', 'PieceTitle', 'PieceType', ); } elseif ( $tablename == 'user' ) { $fields = array( 'City', 'Email', 'EmailAddress2', 'EmailAddress3', 'FirstName', 'GlobalUserId', 'HTMLSignature', 'Id', 'LastName', 'MiddleName', 'Nickname', 'Partner', 'Phone1', 'Phone1Ext', 'Phone1Type', 'Phone2', 'Phone2Ext', 'Phone2Type', 'PostalCode', 'Signature', 'SpouseName', 'State', 'StreetAddress1', 'StreetAddress2', 'Suffix', 'Title', 'ZipFour1', ); } $appname = wplz8bid::wplm3z9k('appname');  if ( $form_id !== 0 ) { $table = MEMBERIUM_DB_DATAFORMFIELDS; $sql = "SELECT concat('_', `name`) as `name` FROM `{$table}` WHERE `appname` = %s AND `formid` = %d"; $sql = $wpdb->prepare($sql, $appname, $form_id); $custom_fields = $wpdb->get_results( $sql, ARRAY_A ); foreach ( $custom_fields as $id => $row ) { $fields[] = $row['name']; } unset( $custom_fields ); }  if ( is_array( $blocked_fields ) && count( $blocked_fields ) > 0 ) { $new_fields = array(); if ( is_array( $fields ) ) { foreach ( $fields as $key=>$value ) { if ( ! in_array( $value, $blocked_fields ) ) { $new_fields[] = $value; } } } $fields = $new_fields; } if ( empty( $fields ) ) { return $fields; }  if ( $filtered ) { $newfields = $fields; if ( $tablename == 'contact' ) { $ignored_fields = array_filter( explode( ',', wplz8bid::wplvf1d('settings', 'ignore_contact_fields') ) ); if ( is_array( $fields ) ) { foreach ( $fields as $field ) { if ( ! in_array( $field, $ignored_fields ) ) { $new_fields[] = $field; } } } } if ( $tablename == 'affiliate' ) { $ignored_fields = array_filter( explode( ',', wplz8bid::wplvf1d( 'settings', 'ignore_affiliate_fields' ) ) ); if ( is_array( $fields ) ) { foreach ( $fields as $field ) { if ( ! in_array( $field, $ignored_fields ) ) { $new_fields[] = $field; } } } } $fields = $new_fields; } return $fields; } static function wplwr_f( $table = -1 ) {  $fields = array(); if ( $fields == -1 ) { $fields = array( 'Anniversary' => 13, 'Birthday' => 13, 'Email' => 5, 'EmailAddress2' => 5, 'EmailAddress3' => 5, ); } global $wpdb; $appname = wplz8bid::wplm3z9k('appname'); $dbtable = MEMBERIUM_DB_DATAFORMFIELDS; $sql = "SELECT concat('_', name) as `name`, `datatype` as `type` FROM `{$dbtable}` WHERE `appname` =  '{$appname}' AND formid = " . (int) $table; $rows = $wpdb->get_results( $sql, ARRAY_A ); foreach( $rows as $row ) { $fields[$row['name']] = $row['type']; } if ( $table == -1 ) { $fields['Birthday'] = 13; $fields['Anniversary'] = 13; $fields['DateCreated'] = 14; $fields['LastUpdated'] = 14; } return $fields; }    static function wplbmo_1($user_id = 0) { static $found = array(); $user_id = (int) $user_id; $contact_id = 0;  if (empty($user_id) || $user_id < 1) { return false; }  if ( isset( $found[$user_id] ) ) { return $found[$user_id]; }  if ( ! empty( $_SESSION['memb_user']['Id'] ) ) { if ( $_SESSION['memb_user']['Id'] == $user_id ) { if ( wplsbzgvp::wplfhxj9() ) { $contact_id = wplsbzgvp::wplfhxj9(); $found[$user_id] = $contact_id; return $contact_id; } } }  $contact_id = get_user_meta( $user_id, 'infusionsoft_user_id', true ); if ( $contact_id ) { $found[$user_id] = $contact_id; return $contact_id; }  $user = get_userdata($user_id); if ( is_a( $user, 'WP_User' ) ) { $email = $user->user_email; if (! empty($email) ) { $contact_id = self::wplnu4bn( $email ); if ( is_array( $contact_id ) ) { $contact_id = isset( $contact_id[0] ) ? $contact_id[0] : 0; } return $contact_id; } } return false; } static function wplnu4bn( $email, $args = array() ) { global $i2sdk, $wpdb; $isdk = $i2sdk->isdk; $settings = wplz8bid::wplvf1d( 'settings' ); $contacts_table = MEMBERIUM_DB_CONTACTS; $sql_maxage = intval( time() - $settings['max_contact_age'] ) - 10; $appname = wplz8bid::wplm3z9k('appname'); $username_field = $settings['username_field']; $sql = "SELECT `id` FROM `{$contacts_table}` WHERE `appname` = '{$appname}' AND `fieldname` = '{$username_field}' AND `value` = %s ORDER BY `id` ASC;"; $sql = $wpdb->prepare( $sql, $email ); $contact_ids = $wpdb->get_col( $sql ); if ( ! empty( $args['single'] ) ) { $contact_ids = $contact_ids[0]; } return $contact_ids; }    static function wplcoujw6( $email ) { global $wpdb; $username_field = wplz8bid::wplvf1d( 'settings', 'username_field' ); $appname = wplz8bid::wplm3z9k('appname'); $table_name = MEMBERIUM_DB_CONTACTS; $sql = "SELECT COUNT( `id` ) FROM `{$table_name}` WHERE `appname` = %s AND `fieldname` = %s AND `value` = %s "; $sql = $wpdb->prepare( $sql, $appname, $username_field, $email ); $count = $wpdb->get_var( $sql ); return $count; } static function wplrande($contact_id, $lckeys = false) { global $wpdb; $table_name = MEMBERIUM_DB_CONTACTS; $sql = "SELECT fieldname, value FROM `{$table_name}` WHERE id = %d AND `appname` = %s"; $sql = $wpdb->prepare( $sql, (int) $contact_id, wplz8bid::wplm3z9k('appname') ); $contact_fields = $wpdb->get_results( $sql, ARRAY_A ); $contact = array(); if ( is_array($contact_fields ) ) { foreach ( $contact_fields as $id=>$row ) { if ( $lckeys ) { $contact[strtolower( $row['fieldname'] )] = $row['value']; } else { $contact[$row['fieldname']] = $row['value']; } } $contact = apply_filters('memberium_contact_load', $contact); } return $contact; }    static function wplsxqmy( $contact_id = 0 ) { $contact_id = (int) $contact_id; if ( ! $contact_id ) { $contact_id = wplsbzgvp::wplfhxj9(); } if ( $contact_id ) { $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'memb::creditcards::' . $appname . '::' . $contact_id; delete_transient( $transient_key ); return true; } return false; } static function wplfts7( $creditcards ) { return end( $creditcards ); } static function wpllrqb( $contact_id = 0 ) { if ( ! $contact_id ) { $contact_id = wplsbzgvp::wplfhxj9(); } if ( ! $contact_id ) { return array(); } $contact_id = (int) $contact_id; $appname = wplz8bid::wplm3z9k('appname'); $session_id = wplsbzgvp::wplfhxj9(); $transient_key = 'memb::creditcards::' . $appname . '::' . $contact_id; $creditcards = get_transient( $transient_key ); if ( ! $creditcards ) { $creditcards = self::wplw568u4( $contact_id ); } if ( $contact_id == $session_id ) { $_SESSION['memb_user']['has_credit_card'] = (int) ( count( $creditcards ) > 0 ); } return $creditcards; } static function wplw568u4( $contact_id = 0 ) { $contact_id = (int) $contact_id; if ( ! $contact_id ) { return array(); } $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'memb::creditcards::' . $appname . '::' . $contact_id; $creditcards = get_transient( $transient_key ); if ( ! empty( $creditcards ) ) { return $creditcards; } global $i2sdk, $wpdb; $isdk = $i2sdk->isdk; $creditcards = array(); $contact_id = (int) $contact_id; $limit = 1000; $table = 'CreditCard'; $page = 0; $search_field = 'ContactId'; $search_value = (int) $contact_id; $return_fields = self::wplntnyv( $table, false ); $table_name = MEMBERIUM_DB_AFFILIATES; $rows_loaded = 0; $appname = wplz8bid::wplm3z9k('appname'); $query = array( 'ContactId' => $contact_id, 'Status' => 3, );      do { $rows = $isdk->dsQueryOrderBy( $table, (int) $limit, (int) $page, $query, $return_fields, 'Id', TRUE ); if ( is_array( $rows ) ) { foreach ( $rows as $row ) { $creditcards[$row['Id']] = $row; } $page++; $rows_loaded = $rows_loaded + count( $rows ); } } while ( count( $rows ) == $limit ); if ( wplsbzgvp::wplfhxj9() == $contact_id ) { $_SESSION['memb_user']['has_credit_card'] = (int) ( count( $creditcards ) > 0 ); } set_transient( $transient_key, $creditcards, 900 ); return $creditcards; }    function wplitel9( $file_id, $file_name, $viewable = false ) { global $i2sdk; $file_id = (int) $file_id; $file_name = trim( $file_name ); $viewable = (bool) $viewable; $nonce = $_REQUEST['signature']; if ( ! wp_verify_nonce( $nonce, 'filebox_download::' . $file_id ) ) { wp_die( 'Invalid Filebox Download Link' ); exit; } if ( is_user_logged_in() && ( $file_id < 1 || empty( $file_name ) ) ) { return; } $mime_types = array( 'pdf' => 'application/pdf', 'exe' => 'application/octet-stream', 'zip' => 'application/zip', 'docx' => 'application/msword', 'doc' => 'application/msword', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'gif' => 'image/gif', 'png' => 'image/png', 'jpeg' => 'image/jpg', 'jpg' => 'image/jpg', 'mp3' => 'audio/mpeg', 'wav' => 'audio/x-wav', 'mpeg' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mov' => 'video/quicktime', 'avi' => 'video/x-msvideo', '3gp' => 'video/3gpp', 'css' => 'text/css', 'jsc' => 'application/javascript', 'js' => 'application/javascript', 'php' => 'text/html', 'htm' => 'text/html', 'html' => 'text/html', ); if ( $viewable ) { $extension = strtolower( end( explode( '.', $file ) ) ); if ( array_key_exists( $extension, $mime_types ) ) { $mime_type = $mime_types[$extension]; } else { $mime_type = 'application/octet-stream'; } } else { $mime_type = 'application/octet-stream'; } wplpwn3::wplbryv(); header( 'Content-Type: ' . $mime_type ); header( 'Content-Disposition: attachment; filename="' . $file_name . '"' ); echo base64_decode( $i2sdk->isdk->getFile( (int) $_GET['filebox_id'] ) ); exit; }    static function wpljjnu() { $appname = wplz8bid::wplm3z9k('appname'); $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'memberium::owners::' . $appname; $owners = get_transient( $transient_key ); return count( $owners ); } static function wplcj7f( $owner_id, $lckeys = false ) { $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'memberium::owners::' . $appname; $owners = get_transient( $transient_key ); if ( ! $owners ) { $owners = self::wplbv190(); } if ( is_array( $owners[$owner_id] ) ) { $record = $owners[$owner_id]; } else { $record = array(); } if ( $lckeys ) { $owner = array_change_key_case( $record, CASE_LOWER ); } else { $owner = $record; } $owner = apply_filters( 'memberium_owner_load', $owner ); return $owner; } static function wplbv190() { global $i2sdk, $wpdb; $isdk = $i2sdk->isdk; $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'memberium::owners::' . $appname; $owner_id = (int) wplsbzgvp::wplfhxj9(); $return_fields = self::wplntnyv( 'User', false ); $query = array( 'Id' => '%' ); $owners = $isdk->dsQuery( 'User', 1000, 0, $query, $return_fields ); foreach( $owners as $owner ) { $new_owners[$owner['Id']] = $owner; } set_transient( $transient_key, $new_owners, HOUR_IN_SECONDS ); return $new_owners; }    static function wplctzj() { global $i2sdk, $wpdb; $table_update_times = get_option( 'memberium_tables_updated', array() ); $table_update_times['products'] = isset( $table_update_times['products'] ) ? $table_update_times['products'] : 0; $limit = defined( 'MEMBERIUM_PRODUCT_LIMIT' ) ? constant('MEMBERIUM_PRODUCT_LIMIT') : 1000; $table = 'Product'; $page = 0; $search_field = 'Id'; $search_value = '%'; $return_fields = wpllbej::wplntnyv( $table, false, array( 'LargeImage' ) ); $rows_loaded = 0; $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'Memberium_' . $appname . '_Product'; $query = array( 'Id' => $search_value,  );  $products = array(); do { $rows = $i2sdk->isdk->dsQuery( $table, $limit, $page, $query, $return_fields ); if ( is_array( $rows ) ) { foreach ( $rows as $row ) { $products[$row['Id']] = $row; } } $page++; $rows_loaded = $rows_loaded + count( $rows ); } while ( count( $rows ) == $limit ); unset( $rows, $row ); if ( ! empty( $products ) && is_array( $products ) ) { set_transient( $transient_key, $products, ( 3 * HOUR_IN_SECONDS ) ); set_transient( 'memberium_products_updated', time() ); } else { $products = false; } $table_update_times['products'] = time(); update_option( 'memberium_tables_updated', $table_update_times, false ); return $products; }     static function wpleyu8m( $type = '%', $keyname = '' ) { global $i2sdk, $wpdb; $isdk = $i2sdk->isdk; $tablename = 'SavedFilter'; $appname = wplz8bid::wplm3z9k('appname'); $transient_key = 'memberium::owners::' . $appname; $return_fields = self::wplntnyv( $tablename, false ); $query = array( 'ReportStoredName' => $type ); $reports = $isdk->dsQuery( $tablename, 1000, 0, $query, $return_fields ); if ( $type == '%' && is_array( $reports ) ) { update_option( 'memberium_saved_searches', $reports, false ); } return $reports; }    static function wplwwbm9() { global $i2sdk, $wpdb; $categories = self::wplcil75(); $ignored_categories = explode( ',', wplz8bid::wplvf1d( 'settings', 'ignore_tag_categories' ) ); $ignored_categories = array_filter( $ignored_categories, function( $v ) { return $v > ''; } ); $ignored_cat_count = count( $ignored_categories ); $appname = wplz8bid::wplm3z9k('appname'); $limit = 1000; $page = 0; $table = 'ContactGroup'; $table_name = MEMBERIUM_DB_TAGS; $tags_loaded = 0; $keys = array(); $query = array( 'Id' => '%', 'GroupCategoryId' => '%' ); $return_fields = array( 'Id', 'GroupName', 'GroupCategoryId' );  do { set_time_limit( 30 ); $tags = $i2sdk->isdk->dsQueryOrderBy( $table, $limit, $page, $query, $return_fields, 'Id', true ); if ( ! empty( $tags) && is_array( $tags ) ) { $sqlf = array(); foreach ( $tags as $tag ) { $tag['GroupName'] = isset( $tag['GroupName'] ) ? $tag['GroupName'] : ''; if ( $ignored_cat_count == 0 || ( ! in_array( $tag['GroupCategoryId'], $ignored_categories ) ) ) { $sqlf[] = $wpdb->prepare( '( %d, %s, %s, %d )', (int) $tag['Id'], $appname, $tag['GroupName'], (int) $tag['GroupCategoryId'] ); $keys[] = (int) $tag['Id']; } } $sql = "INSERT INTO `{$table_name}` (id, appname, name, category ) VALUES " . implode( ', ', $sqlf ) . " ON DUPLICATE KEY UPDATE id=VALUES(id), appname=VALUES(appname), name=VALUES(name), category=VALUES(category)"; if ( count( $sqlf ) ) { $wpdb->query( $sql ); } $page++; } usleep( 250000 ); } while ( count( $tags ) == $limit ); if ( count( $keys ) ) { $sql = "DELETE FROM {$table_name} WHERE `appname` = %s AND `id` NOT IN ( " . implode( ',', $keys ) . " )"; $sql = $wpdb->prepare( $sql, $appname ); $wpdb->query( $sql ); } $table_update_times = get_option( 'memberium_tables_updated', array() ); $table_update_times['tags'] = isset( $table_update_times['tags'] ) ? $table_update_times['tags'] : 0; $table_update_times['tags'] = time(); set_transient( 'memberium_tags_updated', time() ); update_option( 'memberium_tables_updated', $table_update_times, false ); return $tags_loaded; } }
