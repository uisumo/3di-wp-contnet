<?php
/**
 * Copyright (c) 2020 David J Bullock
 * Web Power and Light
*/

 if (! defined( 'ABSPATH' ) ) { die(); }  class wplrav1uy {  public $builder_slug;  public $container_visibility;  public $module_visibility = array();  function __construct( $builder_slug ) { $this->builder_slug = $builder_slug; $this->init(); }  function init() {  add_action('fl_builder_before_render_row', array( $this, 'wplnktfx' ), 10, 2 ); add_action('fl_builder_after_render_row', array( $this, 'wplmjimas' ), 10, 2 );  add_action('fl_builder_before_render_column_group', array( $this, 'wplrdhjl' ), 10, 2 ); add_action('fl_builder_after_render_column_group', array( $this, 'wpllsnha' ), 10, 2 );  add_action('fl_builder_before_render_module', array( $this, 'wpldayvhd' ), 10, 1 ); add_action('fl_builder_after_render_module', array( $this, 'wpluc_zr' ), 10, 1 );  add_filter('wpal/blocks/'.$this->builder_slug.'/element_visibility', array( $this, 'wplyfqot' ), 10, 1 ); }  function wplnktfx( $row, $groups ){ $show = wploxfckj()->wplo3d_4( $row->settings, $this->builder_slug ); if ( !$show ){ $this->container_visibility[ $row->node ] = $row->node; add_filter('fl_builder_template_path', array( $this, 'wplza_s' ), 1 ); } }  function wplmjimas( $row, $groups ){ if ( isset( $this->container_visibility[ $row->node ] ) ){ remove_filter('fl_builder_template_path', array( $this, 'wplza_s' ), 1 ); unset( $this->container_visibility[ $row->node ] ); } }  function wplza_s(){ return false; }  function wplrdhjl( $group, $cols ){ $show_group = true; $hidden_columns = array(); if ( $show_group ){ if ( is_array( $cols ) ){ $column_count = count($cols); foreach ($cols as $c => $col) { if ( $col->type === 'column' && $col->settings > '' ){ $show_col = wploxfckj()->wplo3d_4( $col->settings, $this->builder_slug ); if ( !$show_col ){ $column_count --; if ( !isset( $hidden_columns[ $group->node ] ) ){ $hidden_columns[ $group->node ] = array(); } $hidden_columns[ $group->node ][ $col->node ] = $col->node; } } }  if ( $column_count > 0 ){ if ( !empty($hidden_columns) ){ $this->container_visibility[ $group->parent ] = $hidden_columns; }  } else { if ( !isset( $this->container_visibility[ $group->parent ] ) ) { $this->container_visibility[ $group->parent ] = array(); } $this->container_visibility[ $group->parent ][ $group->node ] = true; add_filter('fl_builder_template_path', array( $this, 'wplwr3k' ), 2 ); } } } }  function wpllsnha( $group, $cols ){ $parent = $group->parent; $node = $group->node;  if ( isset( $this->container_visibility[ $parent ] ) ){  if ( isset( $this->container_visibility[ $parent ][ $node ] ) ){  if ( is_array( $this->container_visibility[ $parent ][ $node ] ) ){  } else {  remove_filter('fl_builder_template_path', array( $this, 'wplwr3k' ), 2 ); unset( $this->container_visibility[ $parent ][ $node ] ); } }  if ( empty( $this->container_visibility[ $parent ] ) ){ unset( $this->container_visibility[ $parent ] ); } } }  function wplwr3k(){ return false; }  function wpldayvhd( $module ){ $show_module = wploxfckj()->wplo3d_4( $module->settings, $this->builder_slug ); if ( $show_module ){  if ( is_array($this->container_visibility) && !empty($this->container_visibility) ){ foreach ($this->container_visibility as $row_id => $row) {  if ( is_array($row) && !empty($row) ) { foreach ( $row as $column_group_id => $column_group ) {  if ( is_array( $column_group ) && !empty( $column_group ) ){ foreach ($column_group as $column_id => $columns) { if ( $column_id === $module->parent ){ $show_module = false; } } } } } } } }  if ( !$show_module ){ $this->module_visibility[] = $module->node; add_filter('fl_builder_template_path', array( $this, 'wploz5u24' ), 3 ); } }  function wpluc_zr( $module ){ $node_key = array_search( $module->node, $this->module_visibility ); if ( $node_key !== false ){ unset($this->module_visibility[$node_key]);  remove_filter('fl_builder_template_path', array( $this, 'wploz5u24' ), 3 ); } }  function wploz5u24(){ return false; }  function wplyfqot( $settings ){ $return = array();  $memberships = array(); foreach ($settings as $name => $value) { if (strpos($name, WPAL_BLOCKS_PREFIX . '_membership_levels') !== false && $value === '1' ) { $memberships[] = (int) str_replace(WPAL_BLOCKS_PREFIX."_membership_levels-","",$name); } } $return['memberships'] = implode( ',', $memberships ); $return['any_membership'] = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_anymembership'}) && $settings->{WPAL_BLOCKS_PREFIX.'_anymembership'} === '1' ) ? 1 : 0; $return['logged_in_only'] = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_loggedin'}) && $settings->{WPAL_BLOCKS_PREFIX.'_loggedin'} === '1' ) ? 1 : 0; $return['logged_out_only'] = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_anonymous_only'}) && $settings->{WPAL_BLOCKS_PREFIX.'_anonymous_only'} === '1' ) ? 1 : 0; $return['invert_results'] = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_invert_results'}) && $settings->{WPAL_BLOCKS_PREFIX.'_invert_results'} === '1' ) ? 1 : 0; $return['contact_ids'] = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_contact_ids'}) && $settings->{WPAL_BLOCKS_PREFIX.'_contact_ids'} > '' ) ? sanitize_text_field($settings->{WPAL_BLOCKS_PREFIX.'_contact_ids'}) : ''; $tags1 = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_access_tags'}) ) ? $settings->{WPAL_BLOCKS_PREFIX.'_access_tags'} : ''; $return['tags1'] = ( is_array($tags1) ) ? implode( ',', $tags1 ) : $tags1; $tags2 = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_access_tags2'}) ) ? $settings->{WPAL_BLOCKS_PREFIX.'_access_tags2'} : ''; $return['tags2'] = ( is_array($tags2) ) ? implode( ',', $tags2 ) : $tags2; $return['eval'] = ( isset($settings->{WPAL_BLOCKS_PREFIX.'_eval'}) && $settings->{WPAL_BLOCKS_PREFIX.'_eval'} > '' ) ? trim($settings->{WPAL_BLOCKS_PREFIX.'_eval'}) : ''; $return['asset_id'] = ( isset($settings->{WPAL_BLOCKS_PREFIX . '_asset_id'}) && $settings->{WPAL_BLOCKS_PREFIX . '_asset_id'} > '' ) ? sanitize_text_field($settings->{WPAL_BLOCKS_PREFIX . '_asset_id'}) : ''; return $return; } }
