<?php
/**
 * Copyright (c) 2020 David J Bullock
 * Web Power and Light
 */

 if (! defined( 'ABSPATH' ) ) { die(); }  function wplbd78(){ return wplbd78::wplwsvahj(); }  class wplbd78 {  private $disabled;  protected $tag_options = false;  private function __construct() {}  static function wplwsvahj() { static $instance = null; if ( is_null( $instance ) ) { $instance = new self; } return $instance; }  function init($disabled){ $this->disabled = $disabled; $active_builders = array();  if ( did_action( 'elementor/loaded' ) ) { $active_builders[] = 'elementor'; }  if ( defined( 'ET_BUILDER_PLUGIN_VERSION' ) || defined( 'ET_CORE_VERSION' ) ) { $active_builders[] = 'divi'; }  if ( class_exists( 'FLBuilder' ) ) { $active_builders[] = 'beaver_builder'; }  if ( defined('TVE_VERSION') ) { $active_builders[] = 'thrive'; }  if ( defined('WPAL_BLOCKS_GUTENBERG') ) { $active_builders[] = 'gutenberg'; } if ( !empty( $active_builders ) ){ $builder_classes = $this->wpljmb4(); foreach ($active_builders as $builder_slug) { $file = trailingslashit( __DIR__ ) . $builder_slug . '/editor.php'; if (file_exists($file) && array_key_exists($builder_slug, $builder_classes) ) { include_once $file; $builder_class = $builder_classes[$builder_slug]; $builder = new $builder_class( $builder_slug ); } else { if ( WPAL_BLOCKS_DEBUG ) wplfle_d::log( __FILE__, __FUNCTION__, __LINE__, 'File ' . $file . ' does not exist' ); } } } }  function wplo35wqk( $builder_slug ){ $config = array(); $disabled = $this->disabled; $priority = 0; $priority_step = 10; $default_checkbox = array( 'type' => 'checkbox', 'default' => '0', 'label_on' => __('On', 'wpal_blocks'), 'label_off' => __('Off', 'wpal_blocks'), 'return_value' => '1' ); $i = 0;  if ( ! array_key_exists( 'any_membership', $disabled ) ){ $config[$i] = $default_checkbox; $config[$i]['name'] = WPAL_BLOCKS_PREFIX . '_anymembership'; $config[$i]['label'] = __('Any', 'wpal_blocks') . ' ' . WPAL_BLOCKS_ACCESS_LEVEL_NAME; $config[$i]['priority'] = $priority + $priority_step; $config[$i]['toggles'] = array( 'on' => array( WPAL_BLOCKS_PREFIX . '_membership_levels' => true, WPAL_BLOCKS_PREFIX . '_anonymous_only' => false, WPAL_BLOCKS_PREFIX . '_loggedin' => false, ), 'off' => false, ); $i ++; }  $memberships = apply_filters('wpal/blocks/access_levels', false, $builder_slug ); $memberships = isset( $memberships ) && is_array( $memberships ) ? $memberships : false; $allow_memberships = ( ! array_key_exists( 'memberships', $disabled ) ) ? true : false; if ( $memberships && $allow_memberships ) { foreach ( $memberships as $id => $membership ) { $config[$i] = $default_checkbox; $config[$i]['name'] = WPAL_BLOCKS_PREFIX . '_membership_levels-'.$id; $config[$i]['label'] = stripslashes( $membership['name'] ) . '&nbsp;(' . $membership['level'] . ')'; $config[$i]['priority'] = $priority + $priority_step; $config[$i]['level'] = $id; $config[$i]['toggles'] = array( 'on' => array( WPAL_BLOCKS_PREFIX . '_anonymous_only' => false, WPAL_BLOCKS_PREFIX . '_loggedin' => false, ), 'off' => array( WPAL_BLOCKS_PREFIX . '_anymembership' => false, ), ); $i ++; } }  if ( ! array_key_exists( 'logged_in_only', $disabled ) ){ $config[$i] = $default_checkbox; $config[$i]['name'] = WPAL_BLOCKS_PREFIX . '_loggedin'; $config[$i]['label'] = __('Any Logged In User', 'wpal_blocks'); $config[$i]['priority'] = $priority + $priority_step; $config[$i]['toggles'] = array( 'on' => array( WPAL_BLOCKS_PREFIX . '_membership_levels' => false, WPAL_BLOCKS_PREFIX . '_anymembership' => false, WPAL_BLOCKS_PREFIX . '_anonymous_only' => false, ), 'off' => false, ); $i ++; }  if ( ! array_key_exists( 'logged_out_only', $disabled ) ){ $config[$i] = $default_checkbox; $config[$i]['name'] = WPAL_BLOCKS_PREFIX . '_anonymous_only'; $config[$i]['label'] = __('Logged Out Only', 'wpal_blocks'); $config[$i]['priority'] = $priority + $priority_step; $config[$i]['toggles'] = array( 'on' => array( WPAL_BLOCKS_PREFIX . '_membership_levels' => false, WPAL_BLOCKS_PREFIX . '_anymembership' => false, WPAL_BLOCKS_PREFIX . '_loggedin' => false, ), 'off' => false, ); $i ++; }  if ( ! array_key_exists( 'invert_results', $disabled ) ){ $config[$i] = $default_checkbox; $config[$i]['name'] = WPAL_BLOCKS_PREFIX . '_invert_results'; $config[$i]['label'] = __('Invert Results', 'wpal_blocks'); $config[$i]['priority'] = $priority + $priority_step; $config[$i]['description'] = __( 'Invert the visibility results ( If the user doesn\'t meet any of the conditions then show. )', 'wpal_blocks' ); $i ++; }  $tag_sel = array(); if ( ! array_key_exists( 'tags1', $disabled ) ){ $tag_sel[WPAL_BLOCKS_PREFIX . '_access_tags'] = __( 'Require', 'wpal_blocks' ) . ' ' . WPAL_BLOCKS_KEY_NAME; } if ( ! array_key_exists( 'tags2', $disabled ) ){ $tag_sel[WPAL_BLOCKS_PREFIX . '_access_tags2'] = __( 'AND Require', 'wpal_blocks' ) . ' ' . WPAL_BLOCKS_KEY_NAME; } if ( !empty($tag_sel) ){ foreach ($tag_sel as $name => $label) { $config[$i] = array( 'name' => $name, 'type' => 'SELECT2', 'label' => $label, 'priority' => $priority + $priority_step, ); $i ++; } }  if ( ! array_key_exists( 'contact_ids', $disabled ) ){ $config[$i] = array( 'name' => WPAL_BLOCKS_PREFIX . '_contact_ids', 'type' => 'textarea', 'label' => __( 'Require User IDs', 'wpal_blocks' ), 'priority' => $priority + $priority_step, 'rows' => 1, 'description' => __( 'Comma Seperated values. Example : 123,456,789', 'wpal_blocks' ), 'sanitize' => 'number-csv', ); $i ++; }  if ( ! array_key_exists( 'eval', $disabled ) ){ $config[$i] = array( 'name' => WPAL_BLOCKS_PREFIX . '_eval', 'type' => 'textarea', 'label' => __( 'PHP Boolean Expression', 'wpal_blocks' ), 'priority' => $priority + $priority_step, 'rows' => 1, 'description' => __( 'Enter a boolean expression which evaluates to true to show or false to hide this element.', 'wpal_blocks' ) ); $i ++; }  if ( ! array_key_exists( 'asset_id', $disabled ) ){ $config[$i] = array( 'name' => WPAL_BLOCKS_PREFIX . '_asset_id', 'type' => 'text', 'label' => __( 'Asset ID', 'wpal_blocks' ), 'priority' => $priority + $priority_step, 'description' => __( 'Enter an admin ID to be used for filters. Non-leading _ and alpha / numerical characters only.', 'wpal_blocks' ), 'sanitize' => 'slugify' ); }  $filtered_config = apply_filters( 'wpal/blocks/'.$builder_slug.'/control/config/', $config ); return $filtered_config; }  function wpltkod($builder_slug){ if ( !$this->tag_options ){ $this->tag_options = apply_filters('wpal/blocks/get_key_map', [], $builder_slug ); } return $this->tag_options; }  function wplwmqo($builder_slug, $id = 'id', $text = 'text' ){ $options = $this->wpltkod($builder_slug); $data = array(); if ( $options ){ foreach ($options as $value => $label) { $data[] = array( $id => $value, $text => $label ); } } return $data; } private function wpljmb4() { return array( 'beaver_builder' => 'wplf6n5ox', 'divi' => 'wplo0vcs', 'elementor' => 'wplwijp', 'gutenberg' => 'wplo6ps3', 'thrive' => 'wpal_block_control_editor_thrive', ); } }
