<?php
 class wplwijp {  public $builder_slug;  public $version = '1.1.0';  public $to_json = array();  public $omitted_blocks = array();  function __construct( $builder_slug ) { $this->builder_slug = $builder_slug; $this->to_json['WPAL_BLOCKS_PREFIX'] = WPAL_BLOCKS_PREFIX; $this->to_json['WPAL_BLOCKS_KEYS_REMOVED_TEXT'] = WPAL_BLOCKS_KEYS_REMOVED_TEXT; $this->to_json['controls'] = wplbd78()->wplo35wqk( $builder_slug ); $this->to_json['tags'] = wplbd78()->wplwmqo( $builder_slug ); $this->omitted_blocks = apply_filters( 'wpal/blocks/'.$builder_slug.'/settings/omitted_blocks', array( 'column', ) ); $this->init(); }  function init() {  add_action('elementor/editor/before_enqueue_scripts', array( $this, 'wplql1fig' ) );  add_action('elementor/element/after_section_end', array( $this, 'wplw5j6' ), 10, 3 );  add_filter('wpal/blocks/'.$this->builder_slug.'/editor/control/args', array( $this, 'wplign0s2' ), 10, 5 ); }  function wplql1fig(){ wp_enqueue_style( 'wpal-blocks-elementor-editor', plugin_dir_url( __FILE__ ) . '/editor.css', array(), $this->version, 'all' ); wp_enqueue_script( 'wpal-blocks-elementor-editor', plugin_dir_url( __FILE__ ) . '/editor.js', array('jquery'), $this->version, true ); wp_localize_script( 'wpal-blocks-elementor-editor', 'wpale_params', $this->to_json ); }  function wplw5j6( $section, $section_id, $args ){ if ( $section_id == 'section_advanced' || $section_id == '_section_style' ){  $controls = $this->wpldwor1( $this->to_json['controls'], $section, $section_id, $args ); if ( !$controls || empty($controls) ){ return; }  $section->start_controls_section( 'wpal-blocks', array( 'label' => WPAL_BLOCKS_SETTINGS_TITLE, 'tab' => \Elementor\Controls_Manager::TAB_ADVANCED ) ); foreach ( $controls as $c => $control ) { $type = ( isset( $control['type'] ) ) ? $this->wplqrhk_t( $control['type'] ) : false; $name = ( isset( $control['name'] ) ) ? $control['name'] : false; if ( $name && $type ){ $control_args = array( 'label' => ( isset( $control['label'] ) ) ? $control['label'] : false, 'type' => $type, );   $conditional_settings = array( 'default', 'description', 'options', 'label_on', 'label_off', 'return_value', 'multiple', 'rows', 'separator', 'placeholder' ); foreach ($conditional_settings as $s => $setting) { if ( isset( $control[$setting] ) ){ $control_args[$setting] = $control[$setting]; } } $control_args = apply_filters( 'wpal/blocks/'.$this->builder_slug.'/editor/control/args', $control_args, $name, $section, $section_id, $args ); $section->add_control( $name, $control_args ); } }  $section->end_controls_section(); } }  function wplqrhk_t( $type = false ){ $type = strtolower( $type ); switch ($type) { case 'select2': return \Elementor\Controls_Manager::TEXT; break; case 'checkbox': return \Elementor\Controls_Manager::SWITCHER; break; case 'textarea': return \Elementor\Controls_Manager::TEXTAREA; break; case 'text': return \Elementor\Controls_Manager::TEXT; break; default: return false; break; } }  function wplign0s2( $control_args, $name, $section, $section_id, $args ){ $pre = $this->to_json['WPAL_BLOCKS_PREFIX']; if ( $name === $pre . '_loggedin' ){ $control_args['separator'] = 'before'; } if ( $name === $pre . '_access_tags' ){ $control_args['separator'] = 'before'; } if ( $name === $pre . '_access_tags' || $name === $pre . '_access_tags2' ){ $control_args['label_block'] = true; $control_args['default'] = ''; } if ( $name === $pre . '_invert_results' ){ $control_args['separator'] = 'before'; } return $control_args; }  function wpldwor1($controls, $section, $section_id, $args){ $omitted = ( in_array( $section->get_type(), $this->omitted_blocks ) ) ? true : false; return ($omitted) ? false : $controls; } }
