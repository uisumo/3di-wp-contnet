<?php

namespace uncanny_learndash_codes;

use FluentForm\App\Helpers\Helper;
use FluentForm\App\Services\FormBuilder\BaseFieldManager;
use FluentForm\Framework\Helpers\ArrayHelper;

/**
 *
 */
class FluentFormCodesField extends BaseFieldManager {

	/**
	 *
	 */
	public function __construct() {
		parent::__construct(
			'uo_codes_field',
			__( 'Uncanny Code', 'uncanny-learndash-cods' ),
			array( 'uncanny', 'codes', 'code' ),
			'advanced' // where to push general/advanced
		);
	}

	/**
	 * @return array
	 */
	public function getComponent() {
		return array(
			'index'          => 999, // The priority of your element
			'element'        => $this->key, // this is the unique identifier.
			'attributes'     => array(
				'name'        => $this->key, // initial name of the input field
				'class'       => '', // Custom element class holder
				'value'       => '', // Default Value holder
				'type'        => 'text', // type of your element eg: text/number/email/tel
				'placeholder' => __( 'Enter the code provided', 'uncanny-learndash-codes' ), // Default Placeholder
			),
			'settings'       => array(
				'container_class'    => '',
				'placeholder'        => '',
				'label'              => $this->title,
				'label_placement'    => '',
				'help_message'       => '',
				'admin_field_label'  => '',
				'validation_rules'   => array(
					'required' => array(
						'value'   => false,
						'message' => __( 'This field is required', 'fluentformpro' ),
					),
				),
				'conditional_logics' => array(),
			),
			'editor_options' => array(
				'title'      => $this->title . ' Field',
				'icon_class' => 'ff-edit-text', // icon of the form in editor
				'template'   => 'inputText', // The template that will show in editor preview
			),
		);
	}

	/**
	 * @return string[]
	 */
	public function getGeneralEditorElements() {
		return parent::getGeneralEditorElements(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return string[]
	 */
	public function getAdvancedEditorElements() {
		return array(
			'help_message',
			'container_class',
			'class',
			'conditional_logics',
		);
	}

	/**
	 * @param $data
	 * @param $form
	 *
	 * @return string
	 */
	private function buildInputGroup( $data, $form ) {
		$input  = '<input ' . $this->buildAttributes( $data['attributes'], $form ) . '>';
		$prefix = ArrayHelper::get( $data, 'settings.prefix_label' );
		$suffix = ArrayHelper::get( $data, 'settings.suffix_label' );
		if ( $prefix || $suffix ) {
			$wrapper = '<div class="ff_input-group">';
			if ( $prefix ) {
				$wrapper .= '<div class="ff_input-group-prepend"><span class="ff_input-group-text">' . $prefix . '</span></div>';
			}
			$wrapper .= $input;
			if ( $suffix ) {
				$wrapper .= '<div class="ff_input-group-append"><span class="ff_input-group-text">' . $suffix . '</span></div>';
			}
			$wrapper .= '</div>';

			return $wrapper;
		}

		return $input;
	}

	/**
	 * @param $data
	 * @param $form
	 *
	 * @return void
	 */
	function render( $data, $form ) {

		$elementName = $data['element'];
		$data        = apply_filters( 'fluentform_rendering_field_data_' . $elementName, $data, $form );

		if ( $tabIndex = \FluentForm\App\Helpers\Helper::getNextTabIndex() ) {
			$data['attributes']['tabindex'] = $tabIndex;
		}

		$data['attributes']['class'] = @trim( 'ff-el-form-control ' . $data['attributes']['class'] );
		$data['attributes']['id']    = $this->makeElementId( $data, $form );

		$elMarkup = $this->buildInputGroup( $data, $form );

		$html = $this->buildElementMarkup( $elMarkup, $data, $form );
		echo apply_filters( 'fluentform_rendering_field_html_' . $elementName, $html, $data, $form );
	}

}
